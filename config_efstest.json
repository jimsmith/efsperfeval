{
   "AWSTemplateFormatVersion" : "2010-09-09",
   "Description" : "This template creates an environment for benchmarking EFS performance.",
   "Parameters" : {
     "KeyName": {
       "Type": "AWS::EC2::KeyPair::KeyName",
       "Description": "Name of an existing EC2 key pair to enable SSH access to the ECS instances"
      },
      "FileSystem": {
       "Type": "String",
       "Description": "Name of an existing EFS filesystem to mount"
      },
      "AzScaleA": {
        "Type": "String",
        "Default": 2,
        "Description": "How many instances to launch in availability zone a"
      },
      "PerAzScaleRest": {
        "Type": "String",
        "Default": 0,
        "Description": "How many instances to launch in availabilty zones b-f"
      }
   },
   "Resources" : {
      "efsVPC" : {
         "Type" : "AWS::EC2::VPC",
         "Properties" : {
            "CidrBlock" : "192.168.0.0/16",
            "EnableDnsSupport" : "true",
            "EnableDnsHostnames" : "true",
            "InstanceTenancy" : "default",
            "Tags" : [ {"Key" : "foo", "Value" : "bar"} ]
         }
      },
      "subneta" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "efsVPC" },
            "CidrBlock" : "192.168.0.0/24",
            "AvailabilityZone" : { "Fn::Join" : ["", [ { "Ref" : "AWS::Region" }, "a" ]] }
         }
      },
      "subnetb" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "efsVPC" },
            "CidrBlock" : "192.168.1.0/24",
            "AvailabilityZone" : { "Fn::Join" : ["", [ { "Ref" : "AWS::Region" }, "b" ]] }
         }
      },
      "subnetc" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "efsVPC" },
            "CidrBlock" : "192.168.2.0/24",
            "AvailabilityZone" : { "Fn::Join" : ["", [ { "Ref" : "AWS::Region" }, "c" ]] }
         }
      },
      "subnetd" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "efsVPC" },
            "CidrBlock" : "192.168.3.0/24",
            "AvailabilityZone" : { "Fn::Join" : ["", [ { "Ref" : "AWS::Region" }, "d" ]] }
         }
      },
      "subnete" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "efsVPC" },
            "CidrBlock" : "192.168.4.0/24",
            "AvailabilityZone" : { "Fn::Join" : ["", [ { "Ref" : "AWS::Region" }, "e" ]] }
         }
      },
      "subnetf" : {
         "Type" : "AWS::EC2::Subnet",
         "Properties" : {
            "VpcId" : { "Ref" : "efsVPC" },
            "CidrBlock" : "192.168.5.0/24",
            "AvailabilityZone" : { "Fn::Join" : ["", [ { "Ref" : "AWS::Region" }, "f" ]] }
         }
      },
      "internetGateway" : {
         "Type" : "AWS::EC2::InternetGateway",
         "Properties" : {
            "Tags" : [ {"Key" : "foo", "Value" : "bar"}]
         }
      },
      "AttachGateway" : {
          "Type" : "AWS::EC2::VPCGatewayAttachment",
          "Properties" : {
          "VpcId" : { "Ref" : "efsVPC" },
          "InternetGatewayId" : { "Ref" : "internetGateway" }
        }
      },
      "routeTable" : {
         "Type" : "AWS::EC2::RouteTable",
         "Properties" : {
            "VpcId" : { "Ref" : "efsVPC" }
         }
      },
      "myRoute" : {
         "Type" : "AWS::EC2::Route",
         "DependsOn" : "internetGateway",
         "Properties" : {
            "RouteTableId" : { "Ref" : "routeTable" },
            "DestinationCidrBlock" : "0.0.0.0/0",
            "GatewayId" : { "Ref" : "internetGateway" }
         }
      },
      "routeTableAssociationa" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "subneta" },
          "RouteTableId" : { "Ref" : "routeTable" }
        }
      },
      "routeTableAssociationb" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "subnetb" },
          "RouteTableId" : { "Ref" : "routeTable" }
        }
      },
      "routeTableAssociationc" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "subnetc" },
          "RouteTableId" : { "Ref" : "routeTable" }
        }
      },
      "routeTableAssociationd" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "subnetd" },
          "RouteTableId" : { "Ref" : "routeTable" }
        }
      },
      "routeTableAssociatione" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "subnete" },
          "RouteTableId" : { "Ref" : "routeTable" }
        }
      },
      "routeTableAssociationf" : {
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "subnetf" },
          "RouteTableId" : { "Ref" : "routeTable" }
        }
      },
      "PublicNetworkAcl" : {
        "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId" : {"Ref" : "efsVPC"},
        }
      },
      "InboundPublicNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
          "RuleNumber" : "102",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : { "From" : "0", "To" : "65535" }
        }
      },
      "OutboundPublicNetworkAclEntry" : {
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
          "RuleNumber" : "100",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "true",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : {"From" : "0", "To" : "65535"}
        }
      },
      "PublicSubnetNetworkAclAssociationa" : {
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "subneta" },
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
        }
      },
      "PublicSubnetNetworkAclAssociationb" : {
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "subnetb" },
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
        }
      },
      "PublicSubnetNetworkAclAssociationc" : {
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "subnetc" },
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
        }
      },
      "PublicSubnetNetworkAclAssociationd" : {
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "subnetd" },
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
        }
      },
      "PublicSubnetNetworkAclAssociatione" : {
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "subnete" },
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
        }
      },
      "PublicSubnetNetworkAclAssociationf" : {
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "subnetf" },
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
        }
      },
      "EFSVPCSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "For Lambda",
          "VpcId" : { "Ref"  : "efsVPC"},
          "SecurityGroupIngress" : [
            {
              "IpProtocol" : "udp",
              "FromPort" : "0",
              "ToPort" : "65535",
              "CidrIp" : "192.168.0.0/16"
            },
            {
              "IpProtocol" : "tcp",
              "FromPort" : "0",
              "ToPort" : "65535",
              "CidrIp" : "0.0.0.0/0"
            }
          ],
          "SecurityGroupEgress" : [
            {
              "IpProtocol" : "udp",
              "FromPort" : "0",
              "ToPort" : "65535",
              "CidrIp" : "192.168.0.0/16"
            },
            {
              "IpProtocol" : "tcp",
              "FromPort" : "0",
              "ToPort" : "65535",
              "CidrIp" : "0.0.0.0/0"
            }
          ]
        }
      },

      "MountTargetSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "VpcId": { "Ref": "efsVPC" },
          "GroupDescription": "Security group for mount target",
          "SecurityGroupIngress": [
            {
              "IpProtocol": "tcp",
              "FromPort": "2049",
              "ToPort": "2049",
              "CidrIp": "192.168.0.0/16"
            }
          ]
        }
      },
      "MountTargeta": {
        "Type": "AWS::EFS::MountTarget",
        "Properties": {
          "FileSystemId": { "Ref": "FileSystem" },
          "SubnetId": { "Ref": "subneta" },
          "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
        }
      },
      "MountTargetb": {
        "Type": "AWS::EFS::MountTarget",
        "Properties": {
          "FileSystemId": { "Ref": "FileSystem" },
          "SubnetId": { "Ref": "subnetb" },
          "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
        }
      },
      "MountTargetc": {
        "Type": "AWS::EFS::MountTarget",
        "Properties": {
          "FileSystemId": { "Ref": "FileSystem" },
          "SubnetId": { "Ref": "subnetc" },
          "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
        }
      },
      "MountTargetd": {
        "Type": "AWS::EFS::MountTarget",
        "Properties": {
          "FileSystemId": { "Ref": "FileSystem" },
          "SubnetId": { "Ref": "subnetd" },
          "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
        }
      },
      "MountTargetf": {
        "Type": "AWS::EFS::MountTarget",
        "Properties": {
          "FileSystemId": { "Ref": "FileSystem" },
          "SubnetId": { "Ref": "subnetf" },
          "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
        }
      },
      "MountTargete": {
        "Type": "AWS::EFS::MountTarget",
        "Properties": {
          "FileSystemId": { "Ref": "FileSystem" },
          "SubnetId": { "Ref": "subnete" },
          "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
        }
      },
      "ControlServerRole" : {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
             "Version" : "2012-10-17",
             "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                   "Service": [ "ec2.amazonaws.com" ]
                },
                "Action": [ "sts:AssumeRole" ]
             } ]
           },
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/AWSLambdaFullAccess",
            "arn:aws:iam::aws:policy/AmazonElasticFileSystemReadOnlyAccess" ]
        }
      },
      "ControlServerIamInstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
          "Roles": [ { "Ref" : "ControlServerRole" } ]
        }
      },
      "ControlServer": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
            "ImageId": "ami-97785bed",
            "InstanceType": "t2.micro",
            "KeyName": { "Ref" : "KeyName" },
            "IamInstanceProfile": { "Ref" : "ControlServerIamInstanceProfile" },
            "NetworkInterfaces": [ {
              "AssociatePublicIpAddress": "true",
              "DeviceIndex": "0",
              "GroupSet": [ { "Ref" : "EFSVPCSecurityGroup" }  ],
              "SubnetId": { "Ref" : "subneta" }
            }],
            "Tags" : [ {"Key" : "Name", "Value" : "EFSTestControl"} ]
        }
      },
      "AutoScalingConfiguration": {
        "Type" : "AWS::AutoScaling::LaunchConfiguration",
        "Properties" : {
          "AssociatePublicIpAddress" : "true",
           "EbsOptimized" : "false",
           "IamInstanceProfile" : { "Ref" : "ControlServerIamInstanceProfile" },
           "ImageId": "ami-97785bed",
           "InstanceType" : "m5.large",
           "KeyName": { "Ref" : "KeyName" },
           "SecurityGroups" : [ { "Ref" : "EFSVPCSecurityGroup" } ],
           "SpotPrice" : "0.10"
         }
      },
      "AutoScalingConfigurationM4": {
        "Type" : "AWS::AutoScaling::LaunchConfiguration",
        "Properties" : {
          "AssociatePublicIpAddress" : "true",
           "EbsOptimized" : "false",
           "IamInstanceProfile" : { "Ref" : "ControlServerIamInstanceProfile" },
           "ImageId": "ami-97785bed",
           "InstanceType" : "m4.large",
           "KeyName": { "Ref" : "KeyName" },
           "SecurityGroups" : [ { "Ref" : "EFSVPCSecurityGroup" } ],
           "SpotPrice" : "0.10"
         }
      },
      "AutoScalingGroupA": {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "Properties" : {
          "DesiredCapacity" : { "Ref": "AzScaleA" },
          "LaunchConfigurationName" : { "Ref" : "AutoScalingConfiguration" },
          "MaxSize" : { "Ref" : "AzScaleA" },
          "MinSize" : { "Ref" : "AzScaleA" },
          "VPCZoneIdentifier" : [ { "Ref" : "subneta"} ]
        }
      },
      "AutoScalingGroupB": {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "Properties" : {
          "DesiredCapacity" : { "Ref": "PerAzScaleRest" },
          "LaunchConfigurationName" : { "Ref" : "AutoScalingConfiguration" },
          "MaxSize" : { "Ref" : "PerAzScaleRest" },
          "MinSize" : { "Ref" : "PerAzScaleRest" },
          "VPCZoneIdentifier" : [ { "Ref" : "subnetb"} ]
        }
      },
      "AutoScalingGroupC": {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "Properties" : {
          "DesiredCapacity" : { "Ref": "PerAzScaleRest" },
          "LaunchConfigurationName" : { "Ref" : "AutoScalingConfiguration" },
          "MaxSize" : { "Ref" : "PerAzScaleRest" },
          "MinSize" : { "Ref" : "PerAzScaleRest" },
          "VPCZoneIdentifier" : [ { "Ref" : "subnetc"} ]
        }
      },
      "AutoScalingGroupD": {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "Properties" : {
          "DesiredCapacity" : { "Ref": "PerAzScaleRest" },
          "LaunchConfigurationName" : { "Ref" : "AutoScalingConfiguration" },
          "MaxSize" : { "Ref" : "PerAzScaleRest" },
          "MinSize" : { "Ref" : "PerAzScaleRest" },
          "VPCZoneIdentifier" : [ { "Ref" : "subnetd"} ]
        }
      },
      "AutoScalingGroupE": {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "Properties" : {
          "DesiredCapacity" : { "Ref": "PerAzScaleRest" },
          "LaunchConfigurationName" : { "Ref" : "AutoScalingConfigurationM4" },
          "MaxSize" : { "Ref" : "PerAzScaleRest" },
          "MinSize" : { "Ref" : "PerAzScaleRest" },
          "VPCZoneIdentifier" : [ { "Ref" : "subnete"} ]
        }
      },
      "AutoScalingGroupF": {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "Properties" : {
          "DesiredCapacity" : { "Ref": "PerAzScaleRest" },
          "LaunchConfigurationName" : { "Ref" : "AutoScalingConfiguration" },
          "MaxSize" : { "Ref" : "PerAzScaleRest" },
          "MinSize" : { "Ref" : "PerAzScaleRest" },
          "VPCZoneIdentifier" : [ { "Ref" : "subnetf"} ]
        }
      }
  }
}
